# -*- coding: utf-8 -*-
"""Exercicio_2_Correlação_e _visualização_Francielle Alves Vargas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1btXviXzUx3m6XmKLlK9_kRchvsZvTxpm

# Exercício 02
## Correlação e Visualização
### Alunos:

- Francielle Alves Vargas

---

Nesse exercício iremos trabalhar com o conjunto *Iris*. Esse conjunto possui 150 observações de 5 variáveis, sendo que a última variável representa a classe.

### Questão 01.

Leia os dados (`pandas.read_csv`) do arquivo `iris.csv` e separe o conjunto em atributos e classe
"""

import pandas as pd
import numpy as np
df = pd.read_csv("iris.csv")

#Verificando se há valores ausentes
df.isnull().sum()

#Verificando valor minimo e máximo
print(df[:10])
df.max()
df.min() 

X = df.iloc[:, :-1].values #atributos: sepal_length, sepal_width, petal_length e petal_width 
y = df.iloc[:, 4].values #classe: type

"""### Questão 02.

Calcule a matriz de covariância dos dados (`numpy.cov`) e visualize-a através de um heatmap (`seaborn.heatmap`). Ative a exibição dos valores de cada célula do heatmap.
"""

import seaborn as sns
import matplotlib.pyplot as plt

#calcula matriz de covariância 
data = np.array(X)
covMatrix = np.cov(data, rowvar=False, bias=True)
print(covMatrix)

#gera um heatmap da matriz de covariância
sns.heatmap(covMatrix, annot=True, fmt='g')
plt.show()

"""---

### Questão 03.

Agora calcule a matriz de correlação (`pandas.DataFrame.corr`) utilizando o método de Pearson, gerando um heatmap da matriz. Esse método apresenta alguma vantagem com o método da questão anterior?
"""

import seaborn as sns
import matplotlib.pyplot as plt

#matriz de corelação usando o método pearson
aux = pd.DataFrame(df, columns=['sepal_length','sepal_width','petal_length', 'petal_width'])
corrMatrix = aux.corr(method='pearson')
print(corrMatrix)

#gera um heatmap
sns.heatmap(corrMatrix, annot=True)
plt.title('Correlação entre variáveis do dataset de Iris')
plt.show()

"""---

### Questão 04.

Agora calcule as matrizes de correlação utilizando os métodos de Kendall e Spearman. Exiba seus heatmaps.
"""

#matriz de corelação usando o método Kendall
aux = pd.DataFrame(df, columns=['sepal_length','sepal_width','petal_length', 'petal_width'])
corrMatrix_kendall = aux.corr(method='kendall')
print(corrMatrix_kendall)

#gera um heatmap
sns.heatmap(corrMatrix_kendall, annot=True)
plt.title('Correlação entre variáveis do dataset de Iris')
plt.show()

#matriz de corelação usando o método Kendall
aux = pd.DataFrame(df, columns=['sepal_length','sepal_width','petal_length', 'petal_width'])
corrMatrix_spearman = aux.corr(method='spearman')
print(corrMatrix_spearman)

#gera um heatmap
sns.heatmap(corrMatrix_spearman, annot=True)
plt.title('Correlação entre variáveis do dataset de Iris')
plt.show()

"""---

### Questão 05.

Determine os pares de variáveis que apresentam maior e menor correlação de spearman. Depois produza scatter plots (`matplotlib.pyplot.scatter`) desses pares de variáveis. Comente como os dados estão distribuídos nos gráficos.
"""

import numpy as np
import matplotlib.pyplot as plt

#pyplot.scatter
X = (corrMatrix_spearman['sepal_length'].max()), (corrMatrix_spearman['sepal_width'].max()), (corrMatrix_spearman['petal_length'].max()), (corrMatrix_spearman['petal_width'].max())
Y = (corrMatrix_spearman['sepal_length'].min()), (corrMatrix_spearman['sepal_width'].min()), (corrMatrix_spearman['petal_length'].min()), (corrMatrix_spearman['petal_width'].min())
plt.scatter(X,Y)
plt.show()

#seaborn.heatmap
aux1 = {
'maior' : [(corrMatrix_spearman['sepal_length'].max()), (corrMatrix_spearman['sepal_width'].max()), (corrMatrix_spearman['petal_length'].max()), (corrMatrix_spearman['petal_width'].max())],
'menor' : [(corrMatrix_spearman['sepal_length'].min()), (corrMatrix_spearman['sepal_width'].min()), (corrMatrix_spearman['petal_length'].min()), (corrMatrix_spearman['petal_width'].min())]
}
data_spearman = pd.DataFrame(aux1)
sns.pairplot(pd.DataFrame(data_spearman))
plt.show()

#<0 Nenhuma concordância
#0-0,19 Concordância pobre
#0,20-0,39 Concordância leve
#0,40-0,59 Concordância moderada
#0,60-0,79 Concordância substancial
#0,80-1,00 Concordância quase perfeita

"""---

### Questão 06.

Produza um diagrama de torta (`matplotlib.pyplot.pie`) com a distribuição das classes desse conjunto de dados
"""

# Data to plot
sizes = corrMatrix_spearman['sepal_length'].max(), corrMatrix_spearman['sepal_width'].max() , corrMatrix_spearman['petal_length'].max() , corrMatrix_spearman['petal_width'].max()
labels = [sepal_length, sepal_width, petal_length, petal_width]
colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']
explode = (0, 0, 0, 0)  # explode 1st slice

# Plot
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
autopct='%1.1f%%', shadow=True, startangle=140)
plt.title('Pares com Maior Coorelação')
plt.axis('equal')
plt.show()

# Data to plot
sizes = corrMatrix_spearman['sepal_length'].min(), corrMatrix_spearman['sepal_width'].min() , corrMatrix_spearman['petal_length'].min() , corrMatrix_spearman['petal_width'].min()
labels = [sepal_length, sepal_width, petal_length, petal_width]
colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']
explode = (0, 0, 0, 0)  # explode 1st slice

# Plot
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
autopct='%1.1f%%', shadow=True, startangle=140)
plt.title('Pares com Menor Coorelação')
plt.axis('equal')
plt.show()
