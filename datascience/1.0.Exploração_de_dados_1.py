# -*- coding: utf-8 -*-
"""Exercicio 1 - Exp. Dados - Francielle Alves Vargas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uLtQNNf5LQmSCePT-y7jaRlVovPI2Vh-

# Exercício 01
## Exploração de Dados
### Alunos:

- Francielle Alves Vargas

## Dados unidimensionais
 
Suponha dois conjuntos de dados, que representam as notas finais em uma dada disciplina de duas salas com 100 alunos. Os dados foram armazenados nos arquivos "notas_salas01.txt" e "notas_salas02.txt". 

Imagine que uma pessoa deseje comparar o desempenho das salas de aula. Considera-se que, **quanto mais alunos foram aprovados, melhor o desempenho da sala**. Suponha que para ser aprovado, um aluno deve ter nota maior que 50. 

Como medida inicial de desempenho, essa pessoa calculou a média dos dados através do código abaixo:
"""

import numpy as np
import pandas as pd

salas = []
salas.append(np.loadtxt("notas_sala01.txt"))
salas.append(np.loadtxt("notas_sala02.txt"))

for i in range(0,2):
    print("--- Sala: %d ---" % (i+1))
    print("Média: %f" % np.mean(salas[i]))

"""Com base na média, a pessoa concluiu que a sala 1 obteve um melhor desempenho que a sala 2. 

### Questão 01. 
Demonstre o porquê dessa conclusão estar equivocada.
   - Dica: Transforme as estruturas `salas[0]` e `salas[1]` em estruturas do tipo `DataFrame` da biblioteca **pandas** e utilize as funções de histograma e/ou boxplot.
"""

import pandas as pd
import matplotlib.pyplot as plt

#RESPOSTA: A conclusão está equivocada porque houve mais alunos aprovados (nota maior que 50) na sala 2 que na sala 1. 
print('-------------Sala 1----------------------------')
s1 = pd.read_csv('notas_sala01.txt', names=['notas_sala_1'])
for index, row in s1.iterrows():
    if row['notas_sala_1'] > 50:
    	v1 = (s1['notas_sala_1'].value_counts())
print('Alunos aprovados', '\n', v1)

s1.hist()
plt.title('Histograma - Notas Sala 1')
plt.ylabel('Qtde')
plt.xlabel('Nota')
plt.show()

#Statistics on the notas_sala01 and notas_sala02 dataframes
print('Soma das notas da sala 1:', s1.sum())
print('Maior nota da sala 1:', s1.max())
print('Menor nota da sala 1:', s1.min())
print('Mediana da sala 1:', s1.median())

print('----------Sala 2-----------------------------')
s2 = pd.read_csv('notas_sala02.txt', names=['notas_sala_2'])
for index, row in s2.iterrows():
    if row['notas_sala_2'] > 50:
    	v2 = (s2['notas_sala_2'].value_counts())
print('Alunos aprovados', '\n', v2)
s2.hist()
plt.title('Histograma - Notas Sala 2')
plt.ylabel('Qtde')
plt.xlabel('Nota')
plt.show()
print('--------------------------------------------')


#Statistics on the notas_sala01 and notas_sala02 dataframes
print('Soma das notas da sala 2:', s2.sum())
print('Maior nota da sala 2:', s2.max())
print('Menor nota da sala 2:', s2.min())
print('Mediana da sala 2:', s2.median())

"""---

### Questão 02.
Calcule o número de aprovados em cada uma das salas.
- Dica: Use a função `argwhere` da biblioteca **numpy**.
"""

import numpy as np

lines1 = open('notas_sala01.txt').readlines()
lines2 = open('notas_sala02.txt').readlines()

print('--------------Sala 1------------------------------')
lista1=[float(i.replace('\n','')) for i in lines1]
lista1 = np.array(lista1)
aprovados1 = np.argwhere(lista1 > 50)
notas_dos_alunos_aprovados1 = lista1[aprovados1]
print("notas dos alunos aprovados ", '\n', notas_dos_alunos_aprovados1)
print('numero de aprovados', len(aprovados1))


print('-----------Sala 2---------------------------------')
lista2=[float(i.replace('\n','')) for i in lines2]
lista2 = np.array(lista2)
aprovados2 = np.argwhere(lista2 > 50)
notas_dos_alunos_aprovados2 = lista2[aprovados2]
print("notas dos alunos aprovados", '\n', notas_dos_alunos_aprovados2)
print('numero de aprovados', len(aprovados2))

"""## Dados multidimensionais

Considere o conjunto Iris, disponível no arquivo `iris.data`.  Ele contém 150 observações sobre 4 características medidas em 3 tipos de flores. 

O trecho de código abaixo carrega o conjunto, armazena-o na variável `iris` e exibe seu conteúdo.
"""

import pandas as pd

iris = pd.read_csv("iris.data", header=None)
iris

"""---


### Questão 03.

Calcule os quatro momentos (média, variância, obliquidade e achatamento) de cada uma das quatro variáveis do conjunto.

  - Dica:  cada variável pode ser acessada da forma `iris[i]`, onde `i` é uma das 4 variáveis do conjunto (entre 0 e 3). Utilize as bibliotecas **numpy** para média (mean) e variância (variance) e **Scipy** para obliquidade (skew) e achatamento (kurtosis).
"""

import scipy.stats

print('--------Média--------')
print('0:', iris[0].mean())
print('1:', iris[1].mean())
print('2:',  iris[2].mean())
print('3:', iris[3].mean())
print('------Variância------')
print('0:', iris[0].var())
print('1:', iris[0].var())
print('2:', iris[0].var())
print('3:', iris[0].var())
print('------Obliquidade------')
print('0:', scipy.stats.skew(iris[0]))
print('1:', scipy.stats.skew(iris[1]))
print('2:', scipy.stats.skew(iris[2]))
print('3:', scipy.stats.skew(iris[3]))
print('------Achatamento------')
print('0:', scipy.stats.kurtosis(iris[0]))
print('1:', scipy.stats.kurtosis(iris[1]))
print('2:', scipy.stats.kurtosis(iris[2]))
print('3:', scipy.stats.kurtosis(iris[3]))

"""---

### Questão 04.

Calcule o histograma e o boxplot de cada uma das quatro variáveis do conjunto. Analise se os dados estão centrados (simetria) e estime qual intervalo contém 50% dos dados (intervalo entre primeiro e terceiro quartil).
"""

print('0: SepalLengthCm')
plt.figure(figsize = (10, 7)) 
x = iris[0]  
plt.hist(x, bins = 20, color = "green") 
plt.title("Sepal Length in cm") 
plt.xlabel("Sepal_Length_cm") 
plt.ylabel("Count") 
plt.show()

print('1: SepalWidthCm')
x = iris[1] 
plt.hist(x, bins = 20, color = "green") 
plt.title("Sepal Width in cm") 
plt.xlabel("Sepal_Width_cm") 
plt.ylabel("Count") 
plt.show()

print('2: PetalLengthincm')
plt.figure(figsize = (10, 7)) 
x = iris[2] 
plt.hist(x, bins = 20, color = "green") 
plt.title("Petal Length in cm") 
plt.xlabel("Petal_Length_cm") 
plt.ylabel("Count") 
plt.show()

print('3: PetalWidthCm')
plt.figure(figsize = (10, 7)) 
x = iris[3] 
plt.hist(x, bins = 20, color = "green") 
plt.title("Petal Width in cm") 
plt.xlabel("Petal_Width_cm") 
plt.ylabel("Count") 
plt.show()

#Bloxplot
plt.figure(figsize = (10, 7)) 
iris.boxplot() 
plt.show()