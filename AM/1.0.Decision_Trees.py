# -*- coding: utf-8 -*-
"""1.0.Decision_Trees.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1csWcDvOy6_Tu9Zf2ZvxgQcEjM91TLtMz

# Material de exemplo sobre pre-processamento de dados e classificação

Este material aborda pré-processamento de dados bem como o uso de um modelo para realizar classificação. Note que, no geral, as funções para classificação da biblioteca sklearn são geralmente utilizados da mesma maneira. Portanto, embora este exemplo utilize o K-nearest neighbors como classificador, a mesma abordagem pode ser utilizada para outros classificadores.

---
Construindo um dataframe a partir de um dicionário:
"""

import pandas as pd

d = {'Atributo_1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'Atributo_2': [6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'Atributo_3': [-1, -7, 18, 99, 1, 0, 2, 3, 40, .6], 'Classe': [0, 0, 1, 1, 0, 0, 0, 0, 1, 0]}
df = pd.DataFrame(data=d)
df

"""---
Simulando valores ausentes:
"""

import numpy as np

df.iloc[1,1] = np.nan
df.iloc[3,2] = np.nan
df.iloc[4,2] = np.nan

df

"""---
Checando a quantidade de valores nulos:
"""

df.isnull().sum()

"""---
Substituindo valores nulos por uma constante:
"""

from sklearn.impute import SimpleImputer
imp = SimpleImputer(missing_values=np.nan, strategy='constant', fill_value=0)
df_clean = imp.fit_transform(df)
df_clean

"""---
Dividindo o dataset em 2 conjuntos, um com $60\%$ dos dados e outro com $40\%$:
"""

from sklearn.model_selection import train_test_split
X = df_clean[:,:-1]
y = df_clean[:,-1:]
print("X:")
print(X)
print("y:")
print(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.40, random_state=0)
print("X_train:")
print(X_train)
print("X_test:")
print(X_test)
print("Y_train:")
print(y_train)
print("Y_test:")
print(y_test)

"""---
Treinando um classificador qualquer:
"""
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)
print(y_train.reshape(-1))
print(y_train)
knn.fit(X_train, y_train.reshape(-1))
y_pred = knn.predict(X_test)
print(y_pred)

"""---
Extraindo acurácia:
"""
from sklearn.metrics import accuracy_score
print("Predict:")
print(y_pred.reshape(-1))
print("True:")
print(y_test.reshape(-1))
accuracy = accuracy_score(y_test.reshape(-1), y_pred) # (tp + tn)/ (tp + tn + fp + fn)
print("Accuracy: %.2f%%" % (accuracy*100))
